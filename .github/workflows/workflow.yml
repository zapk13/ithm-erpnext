name: Deploy ERPNext ITHM Education Portal

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: admin123
          MYSQL_DATABASE: test_erpnext
          MYSQL_USER: erpnext
          MYSQL_PASSWORD: erpnext123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        echo "Installing Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build test image
      run: |
        echo "Building ERPNext test image..."
        docker build -t erpnext-ithm:test .
        echo "Image built successfully"

    - name: Test container startup
      run: |
        echo "Testing ERPNext container startup with docker-compose..."
        
        # Create a test docker-compose override file with different ports
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        services:
          db:
            image: mariadb:10.6
            restart: always
            environment:
              MYSQL_ROOT_PASSWORD: admin123
              MYSQL_DATABASE: erpnext
              MYSQL_USER: erpnext
              MYSQL_PASSWORD: erpnext123
            ports:
              - "3307:3306"  # Use different port to avoid conflicts
            command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

          redis-cache:
            image: redis:alpine
            restart: always
            ports:
              - "6380:6379"  # Use different port

          redis-queue:
            image: redis:alpine
            restart: always
            ports:
              - "6381:6379"  # Use different port

          redis-socketio:
            image: redis:alpine
            restart: always
            ports:
              - "6382:6379"  # Use different port

          erpnext:
            build: .
            restart: always
            environment:
              - DB_HOST=db
              - DB_PORT=3306
              - DB_NAME=erpnext
              - DB_USER=erpnext
              - DB_PASSWORD=erpnext123
              - REDIS_CACHE_URL=redis://redis-cache:6379
              - REDIS_QUEUE_URL=redis://redis-queue:6379
              - REDIS_SOCKETIO_URL=redis://redis-socketio:6379
              - SOCKETIO_PORT=9000
            ports:
              - "8001:8000"  # Use different port
              - "9001:9000"  # Use different port
            depends_on:
              - db
              - redis-cache
              - redis-queue
              - redis-socketio
        EOF
        
        # Start services with test configuration
        docker-compose -f docker-compose.test.yml up -d db redis-cache redis-queue redis-socketio
        
        # Wait for services to be ready
        echo "Waiting for database and Redis services..."
        sleep 30
        
        # Check if services are running
        docker-compose -f docker-compose.test.yml ps
        
        # Test the ERPNext container build
        echo "Building ERPNext container..."
        docker-compose -f docker-compose.test.yml build erpnext
        
        # Start ERPNext container
        echo "Starting ERPNext container..."
        docker-compose -f docker-compose.test.yml up -d erpnext
        
        # Wait for ERPNext to initialize
        echo "Waiting for ERPNext to initialize..."
        sleep 60
        
        # Check if ERPNext container is running
        docker-compose -f docker-compose.test.yml ps erpnext
        
        # Check logs for any critical errors
        echo "Checking ERPNext logs..."
        docker-compose -f docker-compose.test.yml logs erpnext
        
        # Test if ERPNext is responding
        echo "Testing ERPNext response..."
        curl -f http://localhost:8001 || echo "ERPNext not responding yet"
        
        # Cleanup
        echo "Cleaning up test containers..."
        docker-compose -f docker-compose.test.yml down -v

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-docs:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Create documentation
      run: |
        mkdir -p docs
        cp README.md docs/index.md
        
        # Create a simple HTML version
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>ERPNext ITHM Education Portal</title>
          <style>
            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 1200px; margin: 0 auto; padding: 2rem; line-height: 1.6; }
            h1 { color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 0.5rem; }
            h2 { color: #1f2937; margin-top: 2rem; }
            code { background: #f3f4f6; padding: 0.2rem 0.4rem; border-radius: 0.25rem; }
            pre { background: #1f2937; color: #f9fafb; padding: 1rem; border-radius: 0.5rem; overflow-x: auto; }
            .hero { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 3rem; border-radius: 1rem; margin-bottom: 2rem; text-align: center; }
            .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem; margin: 2rem 0; }
            .feature { border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1.5rem; }
            .btn { display: inline-block; background: #2563eb; color: white; padding: 0.75rem 1.5rem; border-radius: 0.5rem; text-decoration: none; margin: 0.5rem; }
          </style>
        </head>
        <body>
          <div class="hero">
            <h1>üè´ ERPNext Education Portal</h1>
            <h2>Institute of Tourism and Hospitality Management</h2>
            <p>Complete education management system for tourism and hospitality institutions</p>
            <a href="#quick-start" class="btn">Get Started</a>
            <a href="https://github.com/${{ github.repository }}" class="btn">View on GitHub</a>
          </div>
          
          <div class="features">
            <div class="feature">
              <h3>üéì Academic Management</h3>
              <p>Complete student lifecycle management with course administration and academic operations.</p>
            </div>
            <div class="feature">
              <h3>üè® Industry-Specific</h3>
              <p>Tailored for tourism and hospitality education with specialized modules and workflows.</p>
            </div>
            <div class="feature">
              <h3>‚òÅÔ∏è Cloud-Ready</h3>
              <p>Designed for GitHub Codespaces with one-click deployment and development environment.</p>
            </div>
          </div>
          
          <div id="quick-start">
            <h2>üöÄ Quick Start</h2>
            <ol>
              <li>Click "Use this template" to create your repository</li>
              <li>Open in GitHub Codespaces</li>
              <li>Wait for automatic setup (5-10 minutes)</li>
              <li>Access at <code>http://localhost:8000</code></li>
            </ol>
            
            <h3>Login Credentials</h3>
            <ul>
              <li><strong>Username:</strong> Administrator</li>
              <li><strong>Password:</strong> admin123</li>
            </ul>
          </div>
        </body>
        </html>
        EOF
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2